import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../../providers/settings_provider.dart';
import '../../models/message_template.dart';

class AutoMessagesScreen extends StatefulWidget {
  const AutoMessagesScreen({super.key});

  @override
  State<AutoMessagesScreen> createState() => _AutoMessagesScreenState();
}

class _AutoMessagesScreenState extends State<AutoMessagesScreen> {
  String _selectedLocale = 'en';
  MessageKind _selectedTemplate = MessageKind.confirm;
  bool _confirmAttendance = true;

  // Mock message templates
  final Map<MessageKind, Map<String, String>> _templates = {
    MessageKind.confirm: {
      'en': 'Hi {patientName}! Your appointment is confirmed for {date} at {time}. Please confirm your attendance by replying YES. See you soon at {clinicName}!',
      'pt': 'Olá {patientName}! Seu agendamento está confirmado para {date} às {time}. Por favor, confirme sua presença respondendo SIM. Te esperamos na {clinicName}!',
      'es': '¡Hola {patientName}! Tu cita está confirmada para {date} a las {time}. Confirma tu asistencia respondiendo SÍ. ¡Nos vemos en {clinicName}!',
    },
    MessageKind.reminder: {
      'en': 'Reminder: You have an appointment tomorrow at {time} with Dr. {professionalName}. Reply CONFIRM to confirm or CANCEL to reschedule.',
      'pt': 'Lembrete: Você tem um agendamento amanhã às {time} com Dr(a). {professionalName}. Responda CONFIRMAR para confirmar ou CANCELAR para reagendar.',
      'es': 'Recordatorio: Tienes una cita mañana a las {time} con Dr. {professionalName}. Responde CONFIRMAR para confirmar o CANCELAR para reprogramar.',
    },
    MessageKind.thankyou: {
      'en': 'Thank you for visiting {clinicName} today, {patientName}! We hope you\\'re happy with your treatment. Your next appointment is scheduled for {nextDate}.',
      'pt': 'Obrigado por visitar a {clinicName} hoje, {patientName}! Esperamos que esteja satisfeito(a) com seu tratamento. Seu próximo agendamento é em {nextDate}.',
      'es': '¡Gracias por visitar {clinicName} hoy, {patientName}! Esperamos que estés feliz con tu tratamiento. Tu próxima cita está programada para {nextDate}.',
    },
    MessageKind.cancel: {
      'en': 'Your appointment on {date} at {time} has been cancelled. We apologize for any inconvenience. Please call us to reschedule: {phone}.',
      'pt': 'Seu agendamento do dia {date} às {time} foi cancelado. Pedimos desculpas pelo inconveniente. Ligue para reagendar: {phone}.',
      'es': 'Tu cita del {date} a las {time} ha sido cancelada. Nos disculpamos por las molestias. Llámanos para reprogramar: {phone}.',\n    },\n    MessageKind.rebook: {\n      'en': 'We have an available slot on {date} at {time}. Would you like to book this appointment? Reply YES to confirm or NO to decline.',\n      'pt': 'Temos um horário disponível no dia {date} às {time}. Gostaria de agendar? Responda SIM para confirmar ou NÃO para recusar.',\n      'es': 'Tenemos un horario disponible el {date} a las {time}. ¿Te gustaría reservar esta cita? Responde SÍ para confirmar o NO para declinar.',\n    },\n  };\n\n  @override\n  Widget build(BuildContext context) {\n    return Consumer<SettingsProvider>(\n      builder: (context, settings, _) {\n        return Scaffold(\n          appBar: AppBar(\n            title: const Text('Auto Messages'),\n            actions: [\n              TextButton(\n                onPressed: () => _sendMessage(context),\n                child: const Text('SEND'),\n              ),\n            ],\n          ),\n          body: Column(\n            children: [\n              // Controls Header\n              Container(\n                padding: const EdgeInsets.all(16),\n                decoration: BoxDecoration(\n                  color: Theme.of(context).cardColor,\n                  boxShadow: [\n                    BoxShadow(\n                      color: Colors.black.withOpacity(0.1),\n                      blurRadius: 4,\n                      offset: const Offset(0, 2),\n                    ),\n                  ],\n                ),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    const Text(\n                      'Message Configuration',\n                      style: TextStyle(\n                        fontSize: 18,\n                        fontWeight: FontWeight.bold,\n                      ),\n                    ),\n                    const SizedBox(height: 16),\n                    \n                    // Template Type Selection\n                    Row(\n                      children: [\n                        const Icon(Icons.message, color: Colors.blue),\n                        const SizedBox(width: 8),\n                        const Text('Template:', style: TextStyle(fontWeight: FontWeight.w500)),\n                        const SizedBox(width: 12),\n                        Expanded(\n                          child: DropdownButton<MessageKind>(\n                            value: _selectedTemplate,\n                            isExpanded: true,\n                            onChanged: (value) {\n                              setState(() {\n                                _selectedTemplate = value!;\n                              });\n                            },\n                            items: MessageKind.values.map((kind) {\n                              return DropdownMenuItem(\n                                value: kind,\n                                child: Text(_getTemplateDisplayName(kind)),\n                              );\n                            }).toList(),\n                          ),\n                        ),\n                      ],\n                    ),\n                    \n                    const SizedBox(height: 12),\n                    \n                    // Language Selection\n                    Row(\n                      children: [\n                        const Icon(Icons.language, color: Colors.green),\n                        const SizedBox(width: 8),\n                        const Text('Language:', style: TextStyle(fontWeight: FontWeight.w500)),\n                        const SizedBox(width: 12),\n                        Expanded(\n                          child: DropdownButton<String>(\n                            value: _selectedLocale,\n                            isExpanded: true,\n                            onChanged: (value) {\n                              setState(() {\n                                _selectedLocale = value!;\n                              });\n                            },\n                            items: settings.localeDisplayNames.entries.map((entry) {\n                              return DropdownMenuItem(\n                                value: entry.key,\n                                child: Text(entry.value),\n                              );\n                            }).toList(),\n                          ),\n                        ),\n                      ],\n                    ),\n                    \n                    const SizedBox(height: 12),\n                    \n                    // Confirm Attendance Toggle\n                    if (_selectedTemplate == MessageKind.confirm)\n                      Row(\n                        children: [\n                          const Icon(Icons.check_circle, color: Colors.orange),\n                          const SizedBox(width: 8),\n                          const Text('Confirm Attendance:', style: TextStyle(fontWeight: FontWeight.w500)),\n                          const Spacer(),\n                          Switch(\n                            value: _confirmAttendance,\n                            onChanged: (value) {\n                              setState(() {\n                                _confirmAttendance = value;\n                              });\n                            },\n                          ),\n                        ],\n                      ),\n                  ],\n                ),\n              ),\n              \n              // Message Preview\n              Expanded(\n                child: Padding(\n                  padding: const EdgeInsets.all(16),\n                  child: Column(\n                    crossAxisAlignment: CrossAxisAlignment.start,\n                    children: [\n                      const Text(\n                        'Message Preview',\n                        style: TextStyle(\n                          fontSize: 18,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                      const SizedBox(height: 16),\n                      \n                      // Preview Card\n                      Expanded(\n                        child: Container(\n                          width: double.infinity,\n                          padding: const EdgeInsets.all(20),\n                          decoration: BoxDecoration(\n                            color: Theme.of(context).cardColor,\n                            borderRadius: BorderRadius.circular(12),\n                            border: Border.all(\n                              color: Theme.of(context).primaryColor.withOpacity(0.3),\n                            ),\n                          ),\n                          child: Column(\n                            crossAxisAlignment: CrossAxisAlignment.start,\n                            children: [\n                              // Message Header\n                              Row(\n                                children: [\n                                  Container(\n                                    width: 40,\n                                    height: 40,\n                                    decoration: BoxDecoration(\n                                      color: Theme.of(context).primaryColor,\n                                      borderRadius: BorderRadius.circular(20),\n                                    ),\n                                    child: const Icon(\n                                      Icons.medical_services,\n                                      color: Colors.white,\n                                      size: 20,\n                                    ),\n                                  ),\n                                  const SizedBox(width: 12),\n                                  Column(\n                                    crossAxisAlignment: CrossAxisAlignment.start,\n                                    children: [\n                                      const Text(\n                                        'Blookia Clinic',\n                                        style: TextStyle(\n                                          fontWeight: FontWeight.bold,\n                                          fontSize: 16,\n                                        ),\n                                      ),\n                                      Text(\n                                        'now',\n                                        style: TextStyle(\n                                          color: Colors.grey[600],\n                                          fontSize: 12,\n                                        ),\n                                      ),\n                                    ],\n                                  ),\n                                  const Spacer(),\n                                  Icon(\n                                    _getChannelIcon(),\n                                    color: _getChannelColor(),\n                                  ),\n                                ],\n                              ),\n                              \n                              const SizedBox(height: 20),\n                              \n                              // Message Content\n                              Expanded(\n                                child: Container(\n                                  width: double.infinity,\n                                  padding: const EdgeInsets.all(16),\n                                  decoration: BoxDecoration(\n                                    color: Colors.blue.withOpacity(0.1),\n                                    borderRadius: BorderRadius.circular(12),\n                                  ),\n                                  child: SingleChildScrollView(\n                                    child: Text(\n                                      _getPreviewText(),\n                                      style: const TextStyle(\n                                        fontSize: 16,\n                                        height: 1.5,\n                                      ),\n                                    ),\n                                  ),\n                                ),\n                              ),\n                              \n                              const SizedBox(height: 16),\n                              \n                              // Channel Indicators\n                              Wrap(\n                                spacing: 8,\n                                children: [\n                                  _buildChannelChip('WhatsApp', Icons.chat, Colors.green),\n                                  _buildChannelChip('SMS', Icons.sms, Colors.blue),\n                                  _buildChannelChip('Email', Icons.email, Colors.orange),\n                                  _buildChannelChip('Instagram', Icons.camera_alt, Colors.purple),\n                                  _buildChannelChip('Telegram', Icons.telegram, Colors.cyan),\n                                ],\n                              ),\n                            ],\n                          ),\n                        ),\n                      ),\n                      \n                      const SizedBox(height: 16),\n                      \n                      // Send Button\n                      SizedBox(\n                        width: double.infinity,\n                        child: ElevatedButton.icon(\n                          onPressed: () => _sendMessage(context),\n                          icon: const Icon(Icons.send),\n                          label: const Text('Send Message'),\n                          style: ElevatedButton.styleFrom(\n                            padding: const EdgeInsets.symmetric(vertical: 16),\n                          ),\n                        ),\n                      ),\n                    ],\n                  ),\n                ),\n              ),\n            ],\n          ),\n        );\n      },\n    );\n  }\n\n  Widget _buildChannelChip(String label, IconData icon, Color color) {\n    return Chip(\n      avatar: Icon(icon, size: 16, color: Colors.white),\n      label: Text(\n        label,\n        style: const TextStyle(\n          color: Colors.white,\n          fontSize: 12,\n          fontWeight: FontWeight.w500,\n        ),\n      ),\n      backgroundColor: color,\n    );\n  }\n\n  String _getTemplateDisplayName(MessageKind kind) {\n    switch (kind) {\n      case MessageKind.confirm:\n        return 'Confirmation';\n      case MessageKind.reminder:\n        return 'Reminder';\n      case MessageKind.thankyou:\n        return 'Thank You';\n      case MessageKind.cancel:\n        return 'Cancellation';\n      case MessageKind.rebook:\n        return 'Rebook Offer';\n    }\n  }\n\n  String _getPreviewText() {\n    final template = _templates[_selectedTemplate]?[_selectedLocale] ?? '';\n    \n    // Replace placeholders with example data\n    return template\n        .replaceAll('{patientName}', 'Sofia Rodriguez')\n        .replaceAll('{date}', 'Monday, March 15th')\n        .replaceAll('{time}', '2:30 PM')\n        .replaceAll('{clinicName}', 'Blookia Aesthetic Clinic')\n        .replaceAll('{professionalName}', 'Dr. Ana Silva')\n        .replaceAll('{phone}', '+55 11 9999-0001')\n        .replaceAll('{nextDate}', 'April 15th');\n  }\n\n  IconData _getChannelIcon() {\n    switch (_selectedTemplate) {\n      case MessageKind.confirm:\n        return Icons.check_circle;\n      case MessageKind.reminder:\n        return Icons.alarm;\n      case MessageKind.thankyou:\n        return Icons.favorite;\n      case MessageKind.cancel:\n        return Icons.cancel;\n      case MessageKind.rebook:\n        return Icons.event_available;\n    }\n  }\n\n  Color _getChannelColor() {\n    switch (_selectedTemplate) {\n      case MessageKind.confirm:\n        return Colors.green;\n      case MessageKind.reminder:\n        return Colors.orange;\n      case MessageKind.thankyou:\n        return Colors.pink;\n      case MessageKind.cancel:\n        return Colors.red;\n      case MessageKind.rebook:\n        return Colors.blue;\n    }\n  }\n\n  void _sendMessage(BuildContext context) {\n    // Mock sending message\n    showDialog(\n      context: context,\n      builder: (context) => AlertDialog(\n        title: const Text('Message Sent'),\n        content: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            Icon(\n              Icons.check_circle,\n              color: Colors.green,\n              size: 48,\n            ),\n            const SizedBox(height: 16),\n            Text(\n              'Your ${_getTemplateDisplayName(_selectedTemplate).toLowerCase()} message has been sent successfully!',\n              textAlign: TextAlign.center,\n            ),\n            const SizedBox(height: 12),\n            Container(\n              padding: const EdgeInsets.all(8),\n              decoration: BoxDecoration(\n                color: Colors.grey.withOpacity(0.1),\n                borderRadius: BorderRadius.circular(8),\n              ),\n              child: Text(\n                'Channels: WhatsApp, SMS, Email',\n                style: TextStyle(\n                  fontSize: 12,\n                  color: Colors.grey[600],\n                ),\n              ),\n            ),\n          ],\n        ),\n        actions: [\n          TextButton(\n            onPressed: () => Navigator.of(context).pop(),\n            child: const Text('OK'),\n          ),\n        ],\n      ),\n    );\n  }\n}