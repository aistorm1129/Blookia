import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';

class PainMapWidget extends StatefulWidget {
  final Map<String, int> painScores;
  final Function(String, int) onScoreChanged;

  const PainMapWidget({
    super.key,
    required this.painScores,
    required this.onScoreChanged,
  });

  @override
  State<PainMapWidget> createState() => _PainMapWidgetState();
}

class _PainMapWidgetState extends State<PainMapWidget> {
  String? _selectedRegion;
  bool _showFrontView = true;

  // Body regions mapping
  final Map<String, Offset> _bodyRegions = {
    'head': const Offset(0.5, 0.15),
    'neck': const Offset(0.5, 0.25),
    'left_shoulder': const Offset(0.35, 0.35),
    'right_shoulder': const Offset(0.65, 0.35),
    'chest': const Offset(0.5, 0.45),
    'left_arm': const Offset(0.25, 0.55),
    'right_arm': const Offset(0.75, 0.55),
    'abdomen': const Offset(0.5, 0.55),
    'lower_back': const Offset(0.5, 0.65),
    'left_hip': const Offset(0.4, 0.65),
    'right_hip': const Offset(0.6, 0.65),
    'left_thigh': const Offset(0.4, 0.75),
    'right_thigh': const Offset(0.6, 0.75),
    'left_knee': const Offset(0.4, 0.85),
    'right_knee': const Offset(0.6, 0.85),\n    'left_calf': const Offset(0.4, 0.92),\n    'right_calf': const Offset(0.6, 0.92),\n  };\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        // View Toggle\n        Container(\n          margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),\n          child: SegmentedButton<bool>(\n            segments: const [\n              ButtonSegment(value: true, label: Text('Front View'), icon: Icon(Icons.person)),\n              ButtonSegment(value: false, label: Text('Back View'), icon: Icon(Icons.accessibility_new)),\n            ],\n            selected: {_showFrontView},\n            onSelectionChanged: (selection) {\n              setState(() {\n                _showFrontView = selection.first;\n              });\n            },\n          ),\n        ),\n        \n        // Body Diagram\n        Expanded(\n          child: Container(\n            padding: const EdgeInsets.all(16),\n            child: LayoutBuilder(\n              builder: (context, constraints) {\n                return Stack(\n                  children: [\n                    // Body Outline\n                    Center(\n                      child: Container(\n                        width: constraints.maxWidth * 0.6,\n                        height: constraints.maxHeight * 0.8,\n                        decoration: BoxDecoration(\n                          color: Colors.grey.withOpacity(0.1),\n                          borderRadius: BorderRadius.circular(20),\n                          border: Border.all(color: Colors.grey.withOpacity(0.3)),\n                        ),\n                        child: CustomPaint(\n                          painter: BodyOutlinePainter(_showFrontView),\n                          size: Size(\n                            constraints.maxWidth * 0.6,\n                            constraints.maxHeight * 0.8,\n                          ),\n                        ),\n                      ),\n                    ),\n                    \n                    // Pain Points\n                    ..._buildPainPoints(constraints),\n                    \n                    // Selected Region Info\n                    if (_selectedRegion != null)\n                      Positioned(\n                        top: 16,\n                        right: 16,\n                        child: _buildRegionInfo(),\n                      ),\n                  ],\n                );\n              },\n            ),\n          ),\n        ),\n        \n        // Pain Scale Selector\n        if (_selectedRegion != null)\n          Container(\n            padding: const EdgeInsets.all(16),\n            margin: const EdgeInsets.all(16),\n            decoration: BoxDecoration(\n              color: Theme.of(context).cardColor,\n              borderRadius: BorderRadius.circular(12),\n              boxShadow: [\n                BoxShadow(\n                  color: Colors.black.withOpacity(0.1),\n                  blurRadius: 8,\n                  offset: const Offset(0, 4),\n                ),\n              ],\n            ),\n            child: Column(\n              crossAxisAlignment: CrossAxisAlignment.start,\n              children: [\n                Text(\n                  'Pain Level for ${_getRegionDisplayName(_selectedRegion!)}',\n                  style: const TextStyle(\n                    fontSize: 16,\n                    fontWeight: FontWeight.bold,\n                  ),\n                ),\n                const SizedBox(height: 16),\n                \n                // Pain Scale Slider\n                Row(\n                  children: [\n                    const Text('0', style: TextStyle(color: Colors.green, fontWeight: FontWeight.bold)),\n                    Expanded(\n                      child: Slider(\n                        value: (widget.painScores[_selectedRegion] ?? 0).toDouble(),\n                        min: 0,\n                        max: 10,\n                        divisions: 10,\n                        activeColor: _getPainColor(widget.painScores[_selectedRegion] ?? 0),\n                        onChanged: (value) {\n                          widget.onScoreChanged(_selectedRegion!, value.round());\n                        },\n                      ),\n                    ),\n                    const Text('10', style: TextStyle(color: Colors.red, fontWeight: FontWeight.bold)),\n                  ],\n                ),\n                \n                // Pain Scale Buttons\n                const SizedBox(height: 8),\n                Wrap(\n                  spacing: 8,\n                  runSpacing: 8,\n                  children: List.generate(11, (index) {\n                    final isSelected = widget.painScores[_selectedRegion] == index;\n                    return GestureDetector(\n                      onTap: () => widget.onScoreChanged(_selectedRegion!, index),\n                      child: Container(\n                        width: 32,\n                        height: 32,\n                        decoration: BoxDecoration(\n                          color: isSelected \n                              ? _getPainColor(index)\n                              : Colors.grey.withOpacity(0.2),\n                          borderRadius: BorderRadius.circular(16),\n                          border: Border.all(\n                            color: isSelected \n                                ? _getPainColor(index)\n                                : Colors.grey.withOpacity(0.5),\n                            width: 2,\n                          ),\n                        ),\n                        child: Center(\n                          child: Text(\n                            index.toString(),\n                            style: TextStyle(\n                              color: isSelected ? Colors.white : Colors.black,\n                              fontWeight: FontWeight.bold,\n                              fontSize: 12,\n                            ),\n                          ),\n                        ),\n                      ),\n                    );\n                  }),\n                ),\n                \n                const SizedBox(height: 12),\n                \n                // Remove Score Button\n                if (widget.painScores.containsKey(_selectedRegion))\n                  SizedBox(\n                    width: double.infinity,\n                    child: OutlinedButton.icon(\n                      onPressed: () {\n                        widget.onScoreChanged(_selectedRegion!, 0);\n                        setState(() {\n                          _selectedRegion = null;\n                        });\n                      },\n                      icon: const Icon(Icons.clear, color: Colors.red),\n                      label: const Text('Remove Pain Score', style: TextStyle(color: Colors.red)),\n                      style: OutlinedButton.styleFrom(\n                        side: const BorderSide(color: Colors.red),\n                      ),\n                    ),\n                  ),\n              ],\n            ),\n          ),\n      ],\n    );\n  }\n\n  List<Widget> _buildPainPoints(BoxConstraints constraints) {\n    final bodyWidth = constraints.maxWidth * 0.6;\n    final bodyHeight = constraints.maxHeight * 0.8;\n    final centerX = constraints.maxWidth * 0.5;\n    final centerY = constraints.maxHeight * 0.4;\n    \n    return _bodyRegions.entries.map((entry) {\n      final region = entry.key;\n      final relativePosition = entry.value;\n      final score = widget.painScores[region] ?? 0;\n      \n      // Calculate absolute position\n      final x = centerX + (relativePosition.dx - 0.5) * bodyWidth;\n      final y = centerY + (relativePosition.dy - 0.5) * bodyHeight;\n      \n      return Positioned(\n        left: x - 20,\n        top: y - 20,\n        child: GestureDetector(\n          onTap: () {\n            setState(() {\n              _selectedRegion = region;\n            });\n          },\n          child: Container(\n            width: 40,\n            height: 40,\n            decoration: BoxDecoration(\n              color: score > 0 \n                  ? _getPainColor(score)\n                  : Colors.blue.withOpacity(0.3),\n              borderRadius: BorderRadius.circular(20),\n              border: Border.all(\n                color: _selectedRegion == region \n                    ? Colors.black\n                    : Colors.white,\n                width: _selectedRegion == region ? 3 : 2,\n              ),\n              boxShadow: [\n                BoxShadow(\n                  color: Colors.black.withOpacity(0.2),\n                  blurRadius: 4,\n                  offset: const Offset(0, 2),\n                ),\n              ],\n            ),\n            child: Center(\n              child: Text(\n                score > 0 ? score.toString() : '+',\n                style: const TextStyle(\n                  color: Colors.white,\n                  fontWeight: FontWeight.bold,\n                  fontSize: 14,\n                ),\n              ),\n            ),\n          ),\n        ),\n      );\n    }).toList();\n  }\n\n  Widget _buildRegionInfo() {\n    final score = widget.painScores[_selectedRegion] ?? 0;\n    return Container(\n      padding: const EdgeInsets.all(12),\n      decoration: BoxDecoration(\n        color: Theme.of(context).cardColor,\n        borderRadius: BorderRadius.circular(8),\n        boxShadow: [\n          BoxShadow(\n            color: Colors.black.withOpacity(0.1),\n            blurRadius: 8,\n            offset: const Offset(0, 2),\n          ),\n        ],\n      ),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        mainAxisSize: MainAxisSize.min,\n        children: [\n          Text(\n            _getRegionDisplayName(_selectedRegion!),\n            style: const TextStyle(\n              fontWeight: FontWeight.bold,\n            ),\n          ),\n          const SizedBox(height: 4),\n          if (score > 0)\n            Row(\n              mainAxisSize: MainAxisSize.min,\n              children: [\n                Container(\n                  width: 12,\n                  height: 12,\n                  decoration: BoxDecoration(\n                    color: _getPainColor(score),\n                    borderRadius: BorderRadius.circular(6),\n                  ),\n                ),\n                const SizedBox(width: 6),\n                Text(\n                  'Pain: $score/10',\n                  style: const TextStyle(\n                    fontWeight: FontWeight.w600,\n                    fontSize: 12,\n                  ),\n                ),\n              ],\n            )\n          else\n            const Text(\n              'Tap to set pain level',\n              style: TextStyle(\n                color: Colors.grey,\n                fontSize: 12,\n              ),\n            ),\n        ],\n      ),\n    );\n  }\n\n  Color _getPainColor(int score) {\n    if (score <= 2) return Colors.green;\n    if (score <= 4) return Colors.yellow.shade700;\n    if (score <= 6) return Colors.orange;\n    if (score <= 8) return Colors.red.shade600;\n    return Colors.red.shade800;\n  }\n\n  String _getRegionDisplayName(String region) {\n    final displayNames = {\n      'head': 'Head',\n      'neck': 'Neck',\n      'left_shoulder': 'Left Shoulder',\n      'right_shoulder': 'Right Shoulder',\n      'chest': 'Chest',\n      'left_arm': 'Left Arm',\n      'right_arm': 'Right Arm',\n      'abdomen': 'Abdomen',\n      'lower_back': 'Lower Back',\n      'left_hip': 'Left Hip',\n      'right_hip': 'Right Hip',\n      'left_thigh': 'Left Thigh',\n      'right_thigh': 'Right Thigh',\n      'left_knee': 'Left Knee',\n      'right_knee': 'Right Knee',\n      'left_calf': 'Left Calf',\n      'right_calf': 'Right Calf',\n    };\n    return displayNames[region] ?? region;\n  }\n}\n\nclass BodyOutlinePainter extends CustomPainter {\n  final bool showFront;\n  \n  BodyOutlinePainter(this.showFront);\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final paint = Paint()\n      ..color = Colors.grey.withOpacity(0.5)\n      ..strokeWidth = 2\n      ..style = PaintingStyle.stroke;\n\n    final fillPaint = Paint()\n      ..color = Colors.grey.withOpacity(0.1)\n      ..style = PaintingStyle.fill;\n\n    final centerX = size.width * 0.5;\n    final path = Path();\n\n    if (showFront) {\n      // Draw simplified front body outline\n      // Head\n      canvas.drawCircle(\n        Offset(centerX, size.height * 0.15),\n        size.width * 0.08,\n        fillPaint,\n      );\n      canvas.drawCircle(\n        Offset(centerX, size.height * 0.15),\n        size.width * 0.08,\n        paint,\n      );\n      \n      // Body outline\n      path.moveTo(centerX - size.width * 0.12, size.height * 0.25); // neck\n      path.lineTo(centerX - size.width * 0.2, size.height * 0.35); // left shoulder\n      path.lineTo(centerX - size.width * 0.15, size.height * 0.7); // left side\n      path.lineTo(centerX - size.width * 0.08, size.height * 0.7); // left hip\n      path.lineTo(centerX - size.width * 0.1, size.height * 1.0); // left leg\n      path.lineTo(centerX - size.width * 0.05, size.height * 1.0); // left foot\n      path.lineTo(centerX + size.width * 0.05, size.height * 1.0); // right foot\n      path.lineTo(centerX + size.width * 0.1, size.height * 1.0); // right leg\n      path.lineTo(centerX + size.width * 0.08, size.height * 0.7); // right hip\n      path.lineTo(centerX + size.width * 0.15, size.height * 0.7); // right side\n      path.lineTo(centerX + size.width * 0.2, size.height * 0.35); // right shoulder\n      path.lineTo(centerX + size.width * 0.12, size.height * 0.25); // neck\n      path.close();\n    } else {\n      // Draw simplified back body outline (similar but slightly different)\n      // Head (back view)\n      canvas.drawCircle(\n        Offset(centerX, size.height * 0.15),\n        size.width * 0.08,\n        fillPaint,\n      );\n      canvas.drawCircle(\n        Offset(centerX, size.height * 0.15),\n        size.width * 0.08,\n        paint,\n      );\n      \n      // Back outline - similar to front\n      path.moveTo(centerX - size.width * 0.12, size.height * 0.25);\n      path.lineTo(centerX - size.width * 0.2, size.height * 0.35);\n      path.lineTo(centerX - size.width * 0.15, size.height * 0.7);\n      path.lineTo(centerX - size.width * 0.08, size.height * 0.7);\n      path.lineTo(centerX - size.width * 0.1, size.height * 1.0);\n      path.lineTo(centerX - size.width * 0.05, size.height * 1.0);\n      path.lineTo(centerX + size.width * 0.05, size.height * 1.0);\n      path.lineTo(centerX + size.width * 0.1, size.height * 1.0);\n      path.lineTo(centerX + size.width * 0.08, size.height * 0.7);\n      path.lineTo(centerX + size.width * 0.15, size.height * 0.7);\n      path.lineTo(centerX + size.width * 0.2, size.height * 0.35);\n      path.lineTo(centerX + size.width * 0.12, size.height * 0.25);\n      path.close();\n    }\n\n    canvas.drawPath(path, fillPaint);\n    canvas.drawPath(path, paint);\n\n    // Add some anatomical reference lines\n    final dashedPaint = Paint()\n      ..color = Colors.grey.withOpacity(0.3)\n      ..strokeWidth = 1;\n    \n    // Horizontal reference lines\n    canvas.drawLine(\n      Offset(centerX - size.width * 0.1, size.height * 0.35),\n      Offset(centerX + size.width * 0.1, size.height * 0.35),\n      dashedPaint,\n    );\n    canvas.drawLine(\n      Offset(centerX - size.width * 0.1, size.height * 0.55),\n      Offset(centerX + size.width * 0.1, size.height * 0.55),\n      dashedPaint,\n    );\n  }\n\n  @override\n  bool shouldRepaint(covariant CustomPainter oldDelegate) {\n    return oldDelegate != this;\n  }\n}