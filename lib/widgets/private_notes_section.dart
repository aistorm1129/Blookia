import 'package:flutter/material.dart';
import '../models/patient.dart';
import '../providers/patient_provider.dart';

class PrivateNotesSection extends StatefulWidget {
  final Patient patient;
  final PatientProvider patientProvider;

  const PrivateNotesSection({
    super.key,
    required this.patient,
    required this.patientProvider,
  });

  @override
  State<PrivateNotesSection> createState() => _PrivateNotesSectionState();
}

class _PrivateNotesSectionState extends State<PrivateNotesSection> {
  final TextEditingController _noteController = TextEditingController();
  bool _isAddingNote = false;

  @override
  void dispose() {
    _noteController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        // Header with warning
        Container(\n          width: double.infinity,\n          margin: const EdgeInsets.all(16),\n          padding: const EdgeInsets.all(16),\n          decoration: BoxDecoration(\n            color: Colors.orange.withOpacity(0.1),\n            borderRadius: BorderRadius.circular(12),\n            border: Border.all(color: Colors.orange.withOpacity(0.3)),\n          ),\n          child: Row(\n            children: [\n              Icon(\n                Icons.lock,\n                color: Colors.orange[700],\n              ),\n              const SizedBox(width: 12),\n              Expanded(\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    Text(\n                      'Private Internal Notes',\n                      style: TextStyle(\n                        fontWeight: FontWeight.bold,\n                        color: Colors.orange[700],\n                        fontSize: 16,\n                      ),\n                    ),\n                    const SizedBox(height: 4),\n                    Text(\n                      'These notes are private and will NOT be included in any exports or patient documents',\n                      style: TextStyle(\n                        color: Colors.orange[600],\n                        fontSize: 12,\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n            ],\n          ),\n        ),\n        \n        // Add Note Section\n        if (_isAddingNote) ..[\n          Container(\n            margin: const EdgeInsets.symmetric(horizontal: 16),\n            child: Card(\n              child: Padding(\n                padding: const EdgeInsets.all(16),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    const Text(\n                      'Add Private Note',\n                      style: TextStyle(\n                        fontSize: 16,\n                        fontWeight: FontWeight.w600,\n                      ),\n                    ),\n                    const SizedBox(height: 12),\n                    TextField(\n                      controller: _noteController,\n                      maxLines: 3,\n                      decoration: const InputDecoration(\n                        hintText: 'Enter private note...',\n                        border: OutlineInputBorder(),\n                      ),\n                    ),\n                    const SizedBox(height: 12),\n                    Row(\n                      children: [\n                        ElevatedButton(\n                          onPressed: _saveNote,\n                          child: const Text('Save'),\n                        ),\n                        const SizedBox(width: 8),\n                        TextButton(\n                          onPressed: _cancelAddNote,\n                          child: const Text('Cancel'),\n                        ),\n                      ],\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ),\n        ] else ..[\n          Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 16),\n            child: SizedBox(\n              width: double.infinity,\n              child: ElevatedButton.icon(\n                onPressed: _startAddNote,\n                icon: const Icon(Icons.add),\n                label: const Text('Add Private Note'),\n              ),\n            ),\n          ),\n        ],\n        \n        const SizedBox(height: 16),\n        \n        // Notes List\n        Expanded(\n          child: widget.patient.internalNotes.isEmpty\n              ? const Center(\n                  child: Column(\n                    mainAxisAlignment: MainAxisAlignment.center,\n                    children: [\n                      Icon(\n                        Icons.note_add,\n                        size: 64,\n                        color: Colors.grey,\n                      ),\n                      SizedBox(height: 16),\n                      Text(\n                        'No private notes yet',\n                        style: TextStyle(\n                          fontSize: 18,\n                          color: Colors.grey,\n                        ),\n                      ),\n                      SizedBox(height: 8),\n                      Text(\n                        'Add notes that won\\'t be exported',\n                        style: TextStyle(\n                          color: Colors.grey,\n                          fontSize: 14,\n                        ),\n                      ),\n                    ],\n                  ),\n                )\n              : ListView.builder(\n                  padding: const EdgeInsets.symmetric(horizontal: 16),\n                  itemCount: widget.patient.internalNotes.length,\n                  itemBuilder: (context, index) {\n                    final note = widget.patient.internalNotes[index];\n                    return Card(\n                      margin: const EdgeInsets.only(bottom: 12),\n                      child: Padding(\n                        padding: const EdgeInsets.all(16),\n                        child: Column(\n                          crossAxisAlignment: CrossAxisAlignment.start,\n                          children: [\n                            Row(\n                              children: [\n                                Icon(\n                                  Icons.lock,\n                                  size: 16,\n                                  color: Colors.orange[700],\n                                ),\n                                const SizedBox(width: 8),\n                                Text(\n                                  'Private Note ${index + 1}',\n                                  style: TextStyle(\n                                    fontSize: 12,\n                                    fontWeight: FontWeight.w600,\n                                    color: Colors.orange[700],\n                                  ),\n                                ),\n                                const Spacer(),\n                                PopupMenuButton<String>(\n                                  onSelected: (value) {\n                                    if (value == 'delete') {\n                                      _deleteNote(index);\n                                    }\n                                  },\n                                  itemBuilder: (context) => [\n                                    const PopupMenuItem(\n                                      value: 'delete',\n                                      child: Row(\n                                        children: [\n                                          Icon(Icons.delete, color: Colors.red),\n                                          SizedBox(width: 8),\n                                          Text('Delete'),\n                                        ],\n                                      ),\n                                    ),\n                                  ],\n                                ),\n                              ],\n                            ),\n                            const SizedBox(height: 8),\n                            Text(\n                              note,\n                              style: const TextStyle(fontSize: 16),\n                            ),\n                            const SizedBox(height: 8),\n                            Container(\n                              padding: const EdgeInsets.symmetric(\n                                horizontal: 8,\n                                vertical: 4,\n                              ),\n                              decoration: BoxDecoration(\n                                color: Colors.red.withOpacity(0.1),\n                                borderRadius: BorderRadius.circular(12),\n                              ),\n                              child: Text(\n                                'NOT INCLUDED IN EXPORTS',\n                                style: TextStyle(\n                                  fontSize: 10,\n                                  fontWeight: FontWeight.bold,\n                                  color: Colors.red[700],\n                                ),\n                              ),\n                            ),\n                          ],\n                        ),\n                      ),\n                    );\n                  },\n                ),\n        ),\n      ],\n    );\n  }\n\n  void _startAddNote() {\n    setState(() {\n      _isAddingNote = true;\n    });\n  }\n\n  void _cancelAddNote() {\n    setState(() {\n      _isAddingNote = false;\n      _noteController.clear();\n    });\n  }\n\n  void _saveNote() async {\n    if (_noteController.text.trim().isEmpty) return;\n\n    try {\n      await widget.patientProvider.addInternalNote(\n        widget.patient.id,\n        _noteController.text.trim(),\n      );\n\n      setState(() {\n        _isAddingNote = false;\n        _noteController.clear();\n      });\n\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Private note added successfully'),\n            backgroundColor: Colors.green,\n          ),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Failed to add note'),\n            backgroundColor: Colors.red,\n          ),\n        );\n      }\n    }\n  }\n\n  void _deleteNote(int index) async {\n    try {\n      await widget.patientProvider.removeInternalNote(\n        widget.patient.id,\n        index,\n      );\n\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Private note deleted'),\n            backgroundColor: Colors.orange,\n          ),\n        );\n      }\n    } catch (e) {\n      if (mounted) {\n        ScaffoldMessenger.of(context).showSnackBar(\n          const SnackBar(\n            content: Text('Failed to delete note'),\n            backgroundColor: Colors.red,\n          ),\n        );\n      }\n    }\n  }\n}